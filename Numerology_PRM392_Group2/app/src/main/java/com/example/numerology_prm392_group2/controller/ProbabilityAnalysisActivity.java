package com.example.numerology_prm392_group2.controller;

import android.content.Intent;
import android.os.Bundle;
import android.widget.TextView;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.numerology_prm392_group2.models.BettingInfo;
import com.example.numerology_prm392_group2.manager.BettingManager;
import com.example.numerology_prm392_group2.models.NumberStats;
import com.example.numerology_prm392_group2.R;
import com.example.numerology_prm392_group2.adapters.TopNumbersAdapter;
import com.example.numerology_prm392_group2.models.KeepItem;
import com.example.numerology_prm392_group2.models.ForwardItem;
import com.google.android.material.button.MaterialButton;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class ProbabilityAnalysisActivity extends AppCompatActivity {

    private TextView totalTicketsText;
    private TextView totalAmountText;
    private TextView uniqueNumbersText;
    private TextView distributionAnalysisText;
    private TextView riskLevelText;
    private TextView expectedPayoutText;
    private TextView expectedProfitText;
    private TextView recommendationText;
    private TextView balancedBettingText;
    private RecyclerView topNumbersRecyclerView;
    private MaterialButton showBalancedListsButton;

    private TopNumbersAdapter topNumbersAdapter;
    private NumberFormat currencyFormat;
    private static final double DEFAULT_SELF_BET_RATIO = 0.001; // 0.1% baseline
    private static final double HIGH_RISK_SELF_BET_RATIO = 0.0005; // 0.05% for high-risk numbers
    private static final double LOW_RISK_SELF_BET_RATIO = 0.0012; // 0.12% for low-risk numbers
    private static final double COMMISSION_RATE = 0.1; // 10% commission
    private static final double PAYOUT_RATIO = 70.0; // 1:70 payout ratio
    private static final double HIGH_RISK_THRESHOLD = 0.1; // 10% of total amount
    private static final double LOW_RISK_THRESHOLD = 0.05; // 5% of total amount

    private List<KeepItem> keepItems;
    private List<ForwardItem> forwardItems;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_probability_analysis);

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        initViews();
        setupRecyclerView();
        analyzeData();
    }

    private void initViews() {
        totalTicketsText = findViewById(R.id.totalTicketsText);
        totalAmountText = findViewById(R.id.totalAmountText);
        uniqueNumbersText = findViewById(R.id.uniqueNumbersText);
        distributionAnalysisText = findViewById(R.id.distributionAnalysisText);
        riskLevelText = findViewById(R.id.riskLevelText);
        expectedPayoutText = findViewById(R.id.expectedPayoutText);
        expectedProfitText = findViewById(R.id.expectedProfitText);
        recommendationText = findViewById(R.id.recommendationText);
        balancedBettingText = findViewById(R.id.balancedBettingText);
        topNumbersRecyclerView = findViewById(R.id.topNumbersRecyclerView);
        showBalancedListsButton = findViewById(R.id.showBalancedListsButton);
        showBalancedListsButton = findViewById(R.id.showBalancedListsButton);
        MaterialButton showFrequencyAnalysisButton = findViewById(R.id.showFrequencyAnalysisButton);

        currencyFormat = NumberFormat.getCurrencyInstance(new Locale("vi", "VN"));

        showBalancedListsButton.setOnClickListener(v -> {
            Intent intent = new Intent(ProbabilityAnalysisActivity.this, BalancedBettingListActivity.class);
            intent.putExtra("keepList", new ArrayList<>(keepItems));
            intent.putExtra("forwardList", new ArrayList<>(forwardItems));
            startActivity(intent);
        });
        showFrequencyAnalysisButton.setOnClickListener(v -> {
            Intent intent = new Intent(ProbabilityAnalysisActivity.this, FrequencyAnalysisActivity.class);
            startActivity(intent);
        });
    }

    private void setupRecyclerView() {
        topNumbersRecyclerView.setLayoutManager(new LinearLayoutManager(this));
    }

    private void analyzeData() {
        List<BettingInfo> bettingList = BettingManager.getInstance().getBettingList();

        if (bettingList.isEmpty()) {
            displayEmptyState();
            return;
        }

        int totalTickets = bettingList.size();
        double totalAmount = 0;
        Map<String, NumberStats> numberStatsMap = new HashMap<>();

        for (BettingInfo betting : bettingList) {
            totalAmount += betting.getBettingAmount();

            String number = betting.getBettingNumber();
            if (numberStatsMap.containsKey(number)) {
                NumberStats stats = numberStatsMap.get(number);
                numberStatsMap.put(number, new NumberStats(
                        number,
                        stats.getTotalAmount() + betting.getBettingAmount(),
                        stats.getTicketCount() + 1
                ));
            } else {
                numberStatsMap.put(number, new NumberStats(
                        number,
                        betting.getBettingAmount(),
                        1
                ));
            }
        }

        int uniqueNumbers = numberStatsMap.size();

        totalTicketsText.setText(String.valueOf(totalTickets));
        totalAmountText.setText(currencyFormat.format(totalAmount));
        uniqueNumbersText.setText(uniqueNumbers + "/100");

        analyzeDistribution(uniqueNumbers, totalAmount);
        calculateExpectedProfit(totalAmount);

        List<NumberStats> topNumbers = new ArrayList<>(numberStatsMap.values());
        Collections.sort(topNumbers, new Comparator<NumberStats>() {
            @Override
            public int compare(NumberStats o1, NumberStats o2) {
                return Double.compare(o2.getTotalAmount(), o1.getTotalAmount());
            }
        });

        topNumbersAdapter = new TopNumbersAdapter(topNumbers);
        topNumbersRecyclerView.setAdapter(topNumbersAdapter);

        generateRecommendation(uniqueNumbers, totalAmount, topNumbers);
        performAdvancedRiskAnalysis(topNumbers, totalAmount);
        calculateSpecificScenarios(topNumbers, totalAmount);
        calculateBalancedBetting(topNumbers, totalAmount);
    }

    private void analyzeDistribution(int uniqueNumbers, double totalAmount) {
        double distributionScore = (double) uniqueNumbers / 100.0;
        String distributionLevel;
        String riskLevel;

        if (distributionScore >= 0.8) {
            distributionLevel = "Ph√¢n ph·ªëi ƒë·ªÅu (L√Ω t∆∞·ªüng)";
            riskLevel = "Th·∫•p - An to√†n";
        } else if (distributionScore >= 0.6) {
            distributionLevel = "Ph√¢n ph·ªëi t∆∞∆°ng ƒë·ªëi ƒë·ªÅu";
            riskLevel = "Trung b√¨nh";
        } else if (distributionScore >= 0.4) {
            distributionLevel = "Ph√¢n ph·ªëi kh√¥ng ƒë·ªÅu";
            riskLevel = "Cao";
        } else {
            distributionLevel = "Ph√¢n ph·ªëi r·∫•t kh√¥ng ƒë·ªÅu";
            riskLevel = "R·∫•t cao";
        }

        distributionAnalysisText.setText("Ph√¢n ph·ªëi: " + distributionLevel + " (" + String.format("%.1f", distributionScore * 100) + "%)");
        riskLevelText.setText("M·ª©c ƒë·ªô r·ªßi ro: " + riskLevel);
    }

    private void calculateExpectedProfit(double totalAmount) {
        double expectedPayout = totalAmount * 0.01 * PAYOUT_RATIO;
        double expectedProfit = totalAmount - expectedPayout;
        double profitPercentage = (expectedProfit / totalAmount) * 100;

        expectedPayoutText.setText(currencyFormat.format(expectedPayout));
        expectedProfitText.setText(currencyFormat.format(expectedProfit) +
                " (" + String.format("%.1f", profitPercentage) + "%)");
    }

    private void generateRecommendation(int uniqueNumbers, double totalAmount, List<NumberStats> topNumbers) {
        StringBuilder recommendation = new StringBuilder();
        double distributionScore = (double) uniqueNumbers / 100.0;

        recommendation.append("üìà PH√ÇN T√çCH NHANH:\n");

        if (distributionScore >= 0.8) {
            recommendation.append("‚úÖ T√¨nh h√¨nh t·ªët: Ph√¢n t√°n ƒë·ªÅu, r·ªßi ro th·∫•p\n");
        } else if (distributionScore >= 0.6) {
            recommendation.append("‚ö†Ô∏è C·∫ßn ch√∫ √Ω: Ph√¢n ph·ªëi ch∆∞a ƒë·ªÅu\n");
        } else {
            recommendation.append("üö® C·∫£nh b√°o: Ph√¢n ph·ªëi kh√¥ng ƒë·ªÅu, r·ªßi ro cao\n");
        }

        if (!topNumbers.isEmpty()) {
            NumberStats topNumber = topNumbers.get(0);
            double topAmount = topNumber.getTotalAmount();
            double maxRisk = topAmount * 0.01 * PAYOUT_RATIO;
            double riskPercent = (maxRisk / totalAmount) * 100;

            recommendation.append("‚Ä¢ S·ªë r·ªßi ro cao nh·∫•t: ").append(topNumber.getNumber())
                    .append(" - ").append(currencyFormat.format(topAmount)).append("\n");
            recommendation.append("‚Ä¢ T·ªïn th·∫•t ti·ªÅm ·∫©n: ").append(currencyFormat.format(maxRisk))
                    .append(" (").append(String.format("%.1f", riskPercent)).append("% v·ªën)\n");

            if (riskPercent > 50.0) {
                recommendation.append("üö® R·ª¶I RO V∆Ø·ª¢T NG∆Ø·ª†NG - T·ª´ ch·ªëi s·ªë n√†y!\n");
            } else if (riskPercent > 25.0) {
                recommendation.append("‚ö†Ô∏è R·ªßi ro cao - C·∫ßn gi·ªõi h·∫°n\n");
            } else {
                recommendation.append("‚úÖ R·ªßi ro ch·∫•p nh·∫≠n ƒë∆∞·ª£c\n");
            }
        }

        recommendationText.setText(recommendation.toString());
    }

    private void performAdvancedRiskAnalysis(List<NumberStats> topNumbers, double totalAmount) {
        StringBuilder advancedAnalysis = new StringBuilder();

        advancedAnalysis.append("üìä PH√ÇN T√çCH R·ª¶I RO CHI TI·∫æT:\n\n");

        analyzeNumberCoverage(topNumbers, totalAmount, advancedAnalysis);
        analyzeConcentrationRisk(topNumbers, totalAmount, advancedAnalysis);
        calculateMaximumRisk(topNumbers, totalAmount, advancedAnalysis);
        generateDetailedRecommendations(topNumbers, totalAmount, advancedAnalysis);

        displayAdvancedAnalysis(advancedAnalysis.toString(), false);
    }

    private void analyzeNumberCoverage(List<NumberStats> topNumbers, double totalAmount, StringBuilder analysis) {
        int totalNumbers = topNumbers.size();
        double coveragePercentage = (double) totalNumbers / 100.0;

        analysis.append("üéØ ƒê·ªô ph·ªß s·ªë: ").append(totalNumbers).append("/100 (")
                .append(String.format("%.1f", coveragePercentage * 100)).append("%)\n");

        if (coveragePercentage >= 0.8) {
            analysis.append("‚úÖ Ph√¢n t√°n t·ªët: R·ªßi ro th·∫•p, l·ª£i nhu·∫≠n ·ªïn ƒë·ªãnh\n");
        } else if (coveragePercentage >= 0.6) {
            analysis.append("‚ö†Ô∏è Ph√¢n t√°n trung b√¨nh: C·∫ßn theo d√µi\n");
        } else if (coveragePercentage >= 0.4) {
            analysis.append("üî∂ T·∫≠p trung cao: R·ªßi ro ƒë√°ng k·ªÉ\n");
        } else {
            analysis.append("üö® R·∫•t t·∫≠p trung: R·ªßi ro cao, c·∫ßn h√†nh ƒë·ªông\n");
        }
        analysis.append("\n");
    }

    private void analyzeConcentrationRisk(List<NumberStats> topNumbers, double totalAmount, StringBuilder analysis) {
        analysis.append("üí∞ PH√ÇN T√çCH T·∫¨P TRUNG R·ª¶I RO:\n");

        double top5Amount = 0;
        int top5Count = Math.min(5, topNumbers.size());

        for (int i = 0; i < top5Count; i++) {
            top5Amount += topNumbers.get(i).getTotalAmount();
        }

        double top5Percentage = (top5Amount / totalAmount) * 100;
        analysis.append("‚Ä¢ Top 5 s·ªë chi·∫øm: ").append(String.format("%.1f", top5Percentage)).append("% t·ªïng ti·ªÅn\n");

        if (top5Percentage > 70) {
            analysis.append("üö® C·ª±c k·ª≥ nguy hi·ªÉm: Qu√° t·∫≠p trung v√†o √≠t s·ªë\n");
        } else if (top5Percentage > 50) {
            analysis.append("‚ö†Ô∏è Nguy hi·ªÉm: T·∫≠p trung cao\n");
        } else if (top5Percentage > 30) {
            analysis.append("üî∂ C·∫ßn ch√∫ √Ω: T·∫≠p trung trung b√¨nh\n");
        } else {
            analysis.append("‚úÖ An to√†n: Ph√¢n t√°n t·ªët\n");
        }

        for (int i = 0; i < Math.min(3, topNumbers.size()); i++) {
            NumberStats number = topNumbers.get(i);
            double percentage = (number.getTotalAmount() / totalAmount) * 100;
            double riskIfWin = number.getTotalAmount() * 0.01 * PAYOUT_RATIO;

            analysis.append("‚Ä¢ S·ªë ").append(number.getNumber()).append(": ")
                    .append(String.format("%.1f", percentage)).append("% - R·ªßi ro: ")
                    .append(formatCurrency(riskIfWin)).append("\n");
        }
        analysis.append("\n");
    }

    private void calculateMaximumRisk(List<NumberStats> topNumbers, double totalAmount, StringBuilder analysis) {
        analysis.append("‚ö° T√åNH HU·ªêNG R·ª¶I RO T·ªêI ƒêA:\n");

        if (!topNumbers.isEmpty()) {
            NumberStats topNumber = topNumbers.get(0);
            double maxPayout = topNumber.getTotalAmount() * 0.01 * PAYOUT_RATIO;
            double lossPercentage = (maxPayout / totalAmount) * 100;

            analysis.append("‚Ä¢ N·∫øu s·ªë ").append(topNumber.getNumber()).append(" tr√∫ng:\n");
            analysis.append("  - Ph·∫£i tr·∫£: ").append(formatCurrency(maxPayout)).append("\n");
            analysis.append("  - T·ª∑ l·ªá thua: ").append(String.format("%.1f", lossPercentage)).append("% v·ªën\n");

            if (lossPercentage > 100) {
                analysis.append("  üö® C·∫¢NH B√ÅO: Thua l·ªó nghi√™m tr·ªçng!\n");
            } else if (lossPercentage > 50) {
                analysis.append("  ‚ö†Ô∏è R·ª¶I RO CAO: Thua n·∫∑ng\n");
            } else if (lossPercentage > 20) {
                analysis.append("  üî∂ R·ª¶I RO TRUNG B√åNH: C·∫ßn c√¢n nh·∫Øc\n");
            } else {
                analysis.append("  ‚úÖ R·ª¶I RO TH·∫§P: C√≥ th·ªÉ ch·∫•p nh·∫≠n\n");
            }
        }

        double worstCaseRisk = 0;
        for (int i = 0; i < Math.min(3, topNumbers.size()); i++) {
            worstCaseRisk += topNumbers.get(i).getTotalAmount() * 0.01 * PAYOUT_RATIO;
        }

        analysis.append("‚Ä¢ Tr∆∞·ªùng h·ª£p x·∫•u nh·∫•t (3 s·ªë top tr√∫ng): ")
                .append(formatCurrency(worstCaseRisk)).append("\n");
        analysis.append("‚Ä¢ T·ª∑ l·ªá r·ªßi ro: ").append(String.format("%.1f", (worstCaseRisk / totalAmount) * 100)).append("%\n\n");
    }

    private void generateDetailedRecommendations(List<NumberStats> topNumbers, double totalAmount, StringBuilder analysis) {
        analysis.append("üìã KHUY·∫æN NGH·ªä CHI TI·∫æT:\n");

        if (!topNumbers.isEmpty()) {
            NumberStats topNumber = topNumbers.get(0);
            double topRisk = (topNumber.getTotalAmount() * 0.01 * PAYOUT_RATIO / totalAmount) * 100;

            if (topRisk > 50) {
                analysis.append("üö® H√ÄNH ƒê·ªòNG NGAY:\n");
                analysis.append("‚Ä¢ T·ª´ ch·ªëi ho·∫∑c gi·ªõi h·∫°n s·ªë ").append(topNumber.getNumber()).append("\n");
                analysis.append("‚Ä¢ Gi·∫£m t·ª∑ l·ªá tr·∫£ th∆∞·ªüng xu·ªëng 1:50 ho·∫∑c th·∫•p h∆°n\n");
                analysis.append("‚Ä¢ T·∫°m ng·ª´ng nh·∫≠n c∆∞·ª£c cho s·ªë n√†y\n");
            } else if (topRisk > 25) {
                analysis.append("‚ö†Ô∏è C·∫¶N H√ÄNH ƒê·ªòNG:\n");
                analysis.append("‚Ä¢ Gi·ªõi h·∫°n ti·ªÅn c∆∞·ª£c t·ªëi ƒëa cho s·ªë ").append(topNumber.getNumber()).append("\n");
                analysis.append("‚Ä¢ Theo d√µi s√°t sao trong ng√†y\n");
                analysis.append("‚Ä¢ C√¢n nh·∫Øc ƒëi·ªÅu ch·ªânh t·ª∑ l·ªá tr·∫£ th∆∞·ªüng\n");
            } else {
                analysis.append("‚úÖ TR·∫†NG TH√ÅI AN TO√ÄN:\n");
                analysis.append("‚Ä¢ Ti·∫øp t·ª•c theo d√µi b√¨nh th∆∞·ªùng\n");
                analysis.append("‚Ä¢ Duy tr√¨ t·ª∑ l·ªá tr·∫£ th∆∞·ªüng hi·ªán t·∫°i\n");
            }
        }

        analysis.append("\nüí° CHI·∫æN L∆Ø·ª¢C T·ªîNG TH·ªÇ:\n");
        analysis.append("‚Ä¢ ƒê·∫∑t limit t·ªëi ƒëa cho m·ªói s·ªë: ").append(formatCurrency(totalAmount * 0.05)).append("\n");
        analysis.append("‚Ä¢ Theo d√µi t·ª∑ l·ªá ph√¢n ph·ªëi h√†ng gi·ªù\n");
        analysis.append("‚Ä¢ Chu·∫©n b·ªã ph∆∞∆°ng √°n d·ª± ph√≤ng cho c√°c s·ªë hot\n");
        analysis.append("‚Ä¢ Duy tr√¨ t·ª∑ l·ªá an to√†n: 70-80% t·ªïng v·ªën\n");
    }

    private void calculateSpecificScenarios(List<NumberStats> topNumbers, double totalAmount) {
        StringBuilder scenarios = new StringBuilder();
        scenarios.append("üìä T√åNH HU·ªêNG C·ª§ TH·ªÇ:\n\n");

        int uniqueNumbers = topNumbers.size();
        double coverageRate = (double) uniqueNumbers / 100.0;

        if (coverageRate >= 0.8) {
            scenarios.append("üéØ Tr∆∞·ªùng h·ª£p l√Ω t∆∞·ªüng:\n");
            scenarios.append("‚Ä¢ Ph√¢n ph·ªëi ƒë·ªÅu, r·ªßi ro th·∫•p\n");
            scenarios.append("‚Ä¢ L·ª£i nhu·∫≠n k·ª≥ v·ªçng: 30% (").append(formatCurrency(totalAmount * 0.3)).append(")\n");
            scenarios.append("‚Ä¢ Khuy·∫øn ngh·ªã: Duy tr√¨ t·ª∑ l·ªá hi·ªán t·∫°i\n\n");
        }

        for (NumberStats number : topNumbers) {
            double riskPercentage = (number.getTotalAmount() / totalAmount) * 100;
            if (riskPercentage > 10) {
                scenarios.append("‚ö†Ô∏è S·ªë ").append(number.getNumber()).append(" - R·ªßi ro cao:\n");
                scenarios.append("‚Ä¢ Chi·∫øm ").append(String.format("%.1f", riskPercentage)).append("% t·ªïng ti·ªÅn\n");
                scenarios.append("‚Ä¢ R·ªßi ro n·∫øu tr√∫ng: ").append(formatCurrency(number.getTotalAmount() * 0.01 * PAYOUT_RATIO)).append("\n");
                scenarios.append("‚Ä¢ Khuy·∫øn ngh·ªã: Gi·ªõi h·∫°n ho·∫∑c t·ª´ ch·ªëi\n\n");
            }
        }

        double top3Amount = 0;
        for (int i = 0; i < Math.min(3, topNumbers.size()); i++) {
            top3Amount += topNumbers.get(i).getTotalAmount();
        }
        double top3Percentage = (top3Amount / totalAmount) * 100;

        if (top3Percentage > 60) {
            scenarios.append("üî• Tr∆∞·ªùng h·ª£p s·ªë n√≥ng:\n");
            scenarios.append("‚Ä¢ Top 3 s·ªë chi·∫øm ").append(String.format("%.1f", top3Percentage)).append("% t·ªïng ti·ªÅn\n");
            scenarios.append("‚Ä¢ R·ªßi ro t·∫≠p trung cao\n");
            scenarios.append("‚Ä¢ Khuy·∫øn ngh·ªã: ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá tr·∫£ th∆∞·ªüng\n\n");
        }

        displayAdvancedAnalysis(scenarios.toString(), false);
    }

    private double calculateSelfBetRatio(NumberStats number, double totalAmount) {
        double betAmount = number.getTotalAmount();
        double percentageOfTotal = betAmount / totalAmount;

        if (percentageOfTotal > HIGH_RISK_THRESHOLD) {
            return HIGH_RISK_SELF_BET_RATIO; // 0.05% for high-risk numbers
        } else if (percentageOfTotal < LOW_RISK_THRESHOLD) {
            return LOW_RISK_SELF_BET_RATIO; // 0.12% for low-risk numbers
        } else {
            return DEFAULT_SELF_BET_RATIO; // 0.1% for medium-risk numbers
        }
    }

    private void calculateBalancedBetting(List<NumberStats> topNumbers, double totalAmount) {
        StringBuilder balancedAnalysis = new StringBuilder();
        balancedAnalysis.append("‚öñÔ∏è CHI·∫æN L∆Ø·ª¢C C√ÇN B·∫∞NG √îM ƒê·ªÄ:\n\n");

        keepItems = new ArrayList<>();
        forwardItems = new ArrayList<>();

        // Calculate data for Keep and Forward lists
        for (NumberStats number : topNumbers) {
            double betAmount = number.getTotalAmount();
            double selfBetRatio = calculateSelfBetRatio(number, totalAmount);
            double selfBetAmount = betAmount * selfBetRatio;
            double forwardBetAmount = betAmount * (1 - selfBetRatio);
            double commission = forwardBetAmount * COMMISSION_RATE;

            // Tr∆∞·ªùng h·ª£p s·ªë kh√¥ng tr√∫ng
            double profitIfNotWin = selfBetAmount + commission;
            // Tr∆∞·ªùng h·ª£p s·ªë tr√∫ng
            double profitIfWin = selfBetAmount - (selfBetAmount * PAYOUT_RATIO) + commission;

            // Add to Keep List
            keepItems.add(new KeepItem(
                    number.getNumber(),
                    selfBetAmount,
                    selfBetRatio,
                    profitIfNotWin,
                    profitIfWin
            ));

            // Add to Forward List
            forwardItems.add(new ForwardItem(
                    number.getNumber(),
                    forwardBetAmount,
                    1 - selfBetRatio,
                    commission
            ));
        }

        // Display summary in balancedBettingText
        balancedAnalysis.append("üìç DANH S√ÅCH GI·ªÆ L·∫†I (T·ª∞ √îM):\n");
        for (KeepItem item : keepItems) {
            balancedAnalysis.append("‚Ä¢ S·ªë ").append(item.getNumber()).append(":\n");
            balancedAnalysis.append("  - Ti·ªÅn t·ª± √¥m: ").append(formatCurrency(item.getSelfBetAmount())).append(" (")
                    .append(String.format("%.2f", item.getSelfBetPercentage() * 100)).append("%)\n");
            balancedAnalysis.append("  - L·ª£i nhu·∫≠n n·∫øu kh√¥ng tr√∫ng: ").append(formatCurrency(item.getProfitIfNotWin())).append("\n");
            balancedAnalysis.append("  - L·ª£i nhu·∫≠n n·∫øu tr√∫ng: ").append(formatCurrency(item.getProfitIfWin())).append("\n\n");
        }

        balancedAnalysis.append("üì§ DANH S√ÅCH G·ª¨I ƒêI (CHO ƒê·∫†I L√ù):\n");
        for (ForwardItem item : forwardItems) {
            balancedAnalysis.append("‚Ä¢ S·ªë ").append(item.getNumber()).append(":\n");
            balancedAnalysis.append("  - Ti·ªÅn g·ª≠i ƒëi: ").append(formatCurrency(item.getForwardAmount())).append(" (")
                    .append(String.format("%.2f", item.getForwardPercentage() * 100)).append("%)\n");
            balancedAnalysis.append("  - Hoa h·ªìng nh·∫≠n ƒë∆∞·ª£c: ").append(formatCurrency(item.getCommission())).append("\n\n");
        }

        // Khuy·∫øn ngh·ªã chung
        balancedAnalysis.append("üí° KHUY·∫æN NGH·ªä C√ÇN B·∫∞NG:\n");
        balancedAnalysis.append("‚Ä¢ T·ª∑ l·ªá t·ª± √¥m ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh theo r·ªßi ro: 0.05% cho s·ªë r·ªßi ro cao (>10% t·ªïng ti·ªÅn), 0.12% cho s·ªë r·ªßi ro th·∫•p (<5%), v√† 0.1% cho s·ªë trung b√¨nh\n");
        balancedAnalysis.append("‚Ä¢ Nh·∫•n 'Xem Danh S√°ch C√¢n B·∫±ng' ƒë·ªÉ xem chi ti·∫øt\n");
        balancedAnalysis.append("‚Ä¢ ƒê·∫£m b·∫£o v·ªën d·ª± ph√≤ng ƒë·ªÉ chi tr·∫£ khi s·ªë hot tr√∫ng\n");

        balancedBettingText.setText(balancedAnalysis.toString());
    }

    private void displayAdvancedAnalysis(String analysis, boolean isBalancedBetting) {
        if (isBalancedBetting) {
            balancedBettingText.setText(analysis);
        } else {
            String currentText = recommendationText.getText().toString();
            recommendationText.setText(currentText + "\n\n" + analysis);
        }
    }

    private String formatCurrency(double amount) {
        return currencyFormat.format(amount);
    }

    private void displayEmptyState() {
        totalTicketsText.setText("0");
        totalAmountText.setText("0 VNƒê");
        uniqueNumbersText.setText("0/100");
        distributionAnalysisText.setText("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch");
        riskLevelText.setText("Kh√¥ng x√°c ƒë·ªãnh");
        expectedPayoutText.setText("0 VNƒê");
        expectedProfitText.setText("0 VNƒê (0%)");
        recommendationText.setText("Vui l√≤ng th√™m d·ªØ li·ªáu c∆∞·ª£c ƒë·ªÉ c√≥ th·ªÉ ph√¢n t√≠ch x√°c su·∫•t v√† ƒë∆∞a ra khuy·∫øn ngh·ªã.");
        balancedBettingText.setText("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch chi·∫øn l∆∞·ª£c c√¢n b·∫±ng.");
        keepItems = new ArrayList<>();
        forwardItems = new ArrayList<>();
    }
}